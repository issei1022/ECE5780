ARM GAS  /var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text._Error_Handler,"ax",%progbits
  19              		.align	1
  20              		.global	_Error_Handler
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	_Error_Handler:
  26              	.LFB42:
   1:Src/main.c    **** /**
   2:Src/main.c    ****   *
   3:Src/main.c    ****   * Brandon Mouser
   4:Src/main.c    ****   * U0962682
   5:Src/main.c    ****   *
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * File Name          : main.c
   8:Src/main.c    ****   * Description        : Main program body
   9:Src/main.c    ****   ******************************************************************************
  10:Src/main.c    ****   ** This notice applies to any and all portions of this file
  11:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
  12:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
  13:Src/main.c    ****   * inserted by the user or by software development tools
  14:Src/main.c    ****   * are owned by their respective copyright owners.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  17:Src/main.c    ****   *
  18:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  19:Src/main.c    ****   * are permitted provided that the following conditions are met:
  20:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  21:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  22:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  23:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  24:Src/main.c    ****   *      and/or other materials provided with the distribution.
  25:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  26:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  27:Src/main.c    ****   *      without specific prior written permission.
  28:Src/main.c    ****   *
  29:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  30:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  31:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  32:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
ARM GAS  /var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s 			page 2


  33:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  35:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  36:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  37:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  38:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  39:Src/main.c    ****   *
  40:Src/main.c    ****   ******************************************************************************
  41:Src/main.c    ****   */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  44:Src/main.c    **** #include "main.h"
  45:Src/main.c    **** #include "stm32f0xx_hal.h"
  46:Src/main.c    **** void _Error_Handler(char * file, int line);
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE BEGIN Includes */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* USER CODE END Includes */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN PV */
  55:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE END PV */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  60:Src/main.c    **** void SystemClock_Config(void);
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PFP */
  63:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  64:Src/main.c    **** 
  65:Src/main.c    **** /* USER CODE END PFP */
  66:Src/main.c    **** 
  67:Src/main.c    **** /* USER CODE BEGIN 0 */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE END 0 */
  70:Src/main.c    **** 
  71:Src/main.c    **** int main(void)
  72:Src/main.c    **** {
  73:Src/main.c    ****   /*
  74:Src/main.c    ****   SystemClock_Config();
  75:Src/main.c    **** 
  76:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
  77:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
  78:Src/main.c    **** 
  79:Src/main.c    ****   uint32_t position = 0x00U;
  80:Src/main.c    ****   uint32_t iocurrent = 0x00U;
  81:Src/main.c    ****   uint32_t temp = 0x00U;
  82:Src/main.c    **** 
  83:Src/main.c    ****   // Mode for PC6-PC9 and PA0
  84:Src/main.c    ****   GPIOC->MODER &= ~(1 << 13);
  85:Src/main.c    ****   GPIOC->MODER |= (1 << 12);
  86:Src/main.c    ****   GPIOC->MODER |= (1 << 14);
  87:Src/main.c    ****   GPIOC->MODER &= ~(1 << 15);
  88:Src/main.c    ****   GPIOA->MODER &= ~(1 << 1);
  89:Src/main.c    ****   GPIOA->MODER &= ~(1 << 0);
ARM GAS  /var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s 			page 3


  90:Src/main.c    **** 
  91:Src/main.c    **** 
  92:Src/main.c    ****   // Type for PC6-PC9 and PA0
  93:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 6);
  94:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 7);
  95:Src/main.c    **** 
  96:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 12);
  97:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 13);
  98:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 14);
  99:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 15);
 100:Src/main.c    ****   GPIOA->OSPEEDR &= ~(1 << 0);
 101:Src/main.c    **** 
 102:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 12);
 103:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 13);
 104:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 14);
 105:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 15);
 106:Src/main.c    ****   GPIOA->PUPDR |= (1 << 1);
 107:Src/main.c    ****   GPIOA->PUPDR &= ~(1 << 0);
 108:Src/main.c    **** 
 109:Src/main.c    ****   GPIOC->ODR |= (1 << 6);
 110:Src/main.c    ****   GPIOC->ODR &= ~(1<<7);
 111:Src/main.c    **** 
 112:Src/main.c    ****   uint32_t debouncer  = 0;
 113:Src/main.c    **** 
 114:Src/main.c    ****   while (1)
 115:Src/main.c    ****   {
 116:Src/main.c    ****     debouncer = (debouncer  << 1);
 117:Src/main.c    **** 
 118:Src/main.c    ****     if(GPIOA->IDR & 1){
 119:Src/main.c    ****       debouncer |= 0x01;
 120:Src/main.c    ****     }
 121:Src/main.c    ****     if(debouncer == 0xFFFFFFFF){
 122:Src/main.c    ****       if(GPIOA->IDR & 1){
 123:Src/main.c    ****         HAL_Delay(100);
 124:Src/main.c    ****         GPIOC->ODR ^= ((1 << 6) | (1<<7));
 125:Src/main.c    ****       }
 126:Src/main.c    ****     }
 127:Src/main.c    ****   }
 128:Src/main.c    **** */
 129:Src/main.c    **** 
 130:Src/main.c    ****   // //part1
 131:Src/main.c    ****   // HAL_Init();
 132:Src/main.c    ****   // SystemClock_Config();
 133:Src/main.c    **** 
 134:Src/main.c    ****   // RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 135:Src/main.c    ****   // RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 136:Src/main.c    **** 
 137:Src/main.c    **** 
 138:Src/main.c    ****   // GPIOC->MODER &= ~((11 << (6 * 2)) | (11 << (7 * 2))); // clear
 139:Src/main.c    ****   // GPIOC->MODER |= (1 << (6 * 2)); // PC6
 140:Src/main.c    ****   // GPIOC->MODER |= (1 << (7 * 2)); // PC7
 141:Src/main.c    **** 
 142:Src/main.c    ****   // // PC6 to high
 143:Src/main.c    ****   // GPIOC->BSRR = (1 << 6);
 144:Src/main.c    **** 
 145:Src/main.c    ****   // while (1)
 146:Src/main.c    ****   // {
ARM GAS  /var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s 			page 4


 147:Src/main.c    ****   //   HAL_Delay(400);
 148:Src/main.c    **** 
 149:Src/main.c    ****   //   GPIOC->ODR ^= (1 << 6) | (1 << 7);
 150:Src/main.c    ****   // }
 151:Src/main.c    **** 
 152:Src/main.c    ****   // //part2
 153:Src/main.c    ****   HAL_Init();
 154:Src/main.c    ****   SystemClock_Config();
 155:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 156:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 157:Src/main.c    **** 
 158:Src/main.c    ****   uint32_t debouncer = 0;
 159:Src/main.c    **** 
 160:Src/main.c    ****   GPIOC->MODER &= ~((3 << (6 * 2)) | (3 << (7 * 2))); // clear
 161:Src/main.c    ****   GPIOC->MODER |= (1 << (6 * 2)); // PC6
 162:Src/main.c    ****   GPIOC->MODER |= (1 << (7 * 2)); // PC7
 163:Src/main.c    ****   GPIOC->OTYPER &= ~((1 << 6) | (1 << 7)); // clear and both push-pull type
 164:Src/main.c    ****   GPIOC->OSPEEDR &= ~((3 << 6) | (3 << 7)); // clear and both low speed type
 165:Src/main.c    ****   GPIOC->PUPDR &= ~((3 << 6) | (3 << 7)); // clear and both no pull-up down
 166:Src/main.c    **** 
 167:Src/main.c    ****   // // PC7 to high
 168:Src/main.c    ****   GPIOC->BSRR = (1 << 7);
 169:Src/main.c    ****   // // PC6 to low
 170:Src/main.c    ****   GPIOC->BSRR = (1 << (6 + 16));
 171:Src/main.c    **** 
 172:Src/main.c    ****   // // PA_0 setting  
 173:Src/main.c    ****   GPIOA->MODER &= ~(3 << (0 * 2)); // input mode
 174:Src/main.c    **** 
 175:Src/main.c    ****   GPIOA->OSPEEDR &= ~(3 << (0 * 2)); // Clear speed setting for PA0
 176:Src/main.c    **** 
 177:Src/main.c    ****   GPIOA->PUPDR &= ~(3 << (0 * 2)); // clear setting
 178:Src/main.c    ****   GPIOA->PUPDR |= (2 << (0 * 2));
 179:Src/main.c    **** 
 180:Src/main.c    ****   uint8_t ledState = 0;
 181:Src/main.c    **** 
 182:Src/main.c    ****   while(1) {
 183:Src/main.c    ****     debouncer = (debouncer << 1); // Always shift every loop iteration
 184:Src/main.c    ****     if (GPIOA->IDR & (1 << 0)) { // If input signal is set/high
 185:Src/main.c    ****       debouncer |= 0x01; // Set lowest bit of bit-vector
 186:Src/main.c    ****     }
 187:Src/main.c    ****     if (debouncer == 0xFFFFFFFF) {
 188:Src/main.c    ****     // This code triggers repeatedly when button is steady high!
 189:Src/main.c    ****     }
 190:Src/main.c    ****     if (debouncer == 0x00000000) {
 191:Src/main.c    ****     // This code triggers repeatedly when button is steady low!
 192:Src/main.c    ****     }
 193:Src/main.c    ****     if (debouncer == 0x7FFFFFFF) {
 194:Src/main.c    ****     // This code triggers only once when transitioning to steady high!
 195:Src/main.c    ****       if (ledState == 0) {
 196:Src/main.c    ****               // LED ON
 197:Src/main.c    ****               GPIOC->BSRR = (1 << 6); // LED ON PC6
 198:Src/main.c    ****               GPIOC->BSRR = (1 << (7 + 16)); // LED OFF PC7
 199:Src/main.c    ****               ledState = 1; // LED state
 200:Src/main.c    ****           } else {
 201:Src/main.c    ****               // LED OFF
 202:Src/main.c    ****               GPIOC->BSRR = (1 << 7); // LED ON PC6
 203:Src/main.c    ****               GPIOC->BSRR = (1 << (6 + 16)); // LED OFF PC6
ARM GAS  /var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s 			page 5


 204:Src/main.c    ****               ledState = 0; // LED state
 205:Src/main.c    ****           
 206:Src/main.c    ****           }
 207:Src/main.c    ****     // When button is bouncing the bit-vector value is random since bits are set when
 208:Src/main.c    ****     // the button is high and not when it bounces low.
 209:Src/main.c    ****     }
 210:Src/main.c    **** 
 211:Src/main.c    ****   }
 212:Src/main.c    **** }
 213:Src/main.c    **** 
 214:Src/main.c    **** /** System Clock Configuration
 215:Src/main.c    **** */
 216:Src/main.c    **** void SystemClock_Config(void)
 217:Src/main.c    **** {
 218:Src/main.c    **** 
 219:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 220:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 221:Src/main.c    **** 
 222:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 223:Src/main.c    ****     */
 224:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 225:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 226:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 227:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 228:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 229:Src/main.c    ****   {
 230:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 231:Src/main.c    ****   }
 232:Src/main.c    **** 
 233:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 234:Src/main.c    ****     */
 235:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 236:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 237:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 238:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 239:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 240:Src/main.c    **** 
 241:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 242:Src/main.c    ****   {
 243:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 244:Src/main.c    ****   }
 245:Src/main.c    **** 
 246:Src/main.c    ****     /**Configure the Systick interrupt time
 247:Src/main.c    ****     */
 248:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 249:Src/main.c    **** 
 250:Src/main.c    ****     /**Configure the Systick
 251:Src/main.c    ****     */
 252:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 253:Src/main.c    **** 
 254:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 255:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 256:Src/main.c    **** }
 257:Src/main.c    **** 
 258:Src/main.c    **** /* USER CODE BEGIN 4 */
 259:Src/main.c    **** 
 260:Src/main.c    **** /* USER CODE END 4 */
ARM GAS  /var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s 			page 6


 261:Src/main.c    **** 
 262:Src/main.c    **** /**
 263:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 264:Src/main.c    ****   * @param  None
 265:Src/main.c    ****   * @retval None
 266:Src/main.c    ****   */
 267:Src/main.c    **** void _Error_Handler(char * file, int line)
 268:Src/main.c    **** {
  27              		.loc 1 268 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34              	.L2:
 269:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 270:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 271:Src/main.c    ****   while(1)
  35              		.loc 1 271 3 view .LVU1
 272:Src/main.c    ****   {
 273:Src/main.c    ****   }
  36              		.loc 1 273 3 view .LVU2
 271:Src/main.c    ****   {
  37              		.loc 1 271 8 view .LVU3
  38 0000 FEE7     		b	.L2
  39              		.cfi_endproc
  40              	.LFE42:
  42              		.section	.rodata.SystemClock_Config.str1.4,"aMS",%progbits,1
  43              		.align	2
  44              	.LC0:
  45 0000 5372632F 		.ascii	"Src/main.c\000"
  45      6D61696E 
  45      2E6300
  46              		.global	__aeabi_uidiv
  47              		.section	.text.SystemClock_Config,"ax",%progbits
  48              		.align	1
  49              		.global	SystemClock_Config
  50              		.syntax unified
  51              		.code	16
  52              		.thumb_func
  54              	SystemClock_Config:
  55              	.LFB41:
 217:Src/main.c    **** 
  56              		.loc 1 217 1 view -0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 72
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60 0000 00B5     		push	{lr}
  61              	.LCFI0:
  62              		.cfi_def_cfa_offset 4
  63              		.cfi_offset 14, -4
  64 0002 93B0     		sub	sp, sp, #76
  65              	.LCFI1:
  66              		.cfi_def_cfa_offset 80
 219:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
  67              		.loc 1 219 3 view .LVU5
ARM GAS  /var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s 			page 7


 220:Src/main.c    **** 
  68              		.loc 1 220 3 view .LVU6
 224:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  69              		.loc 1 224 3 view .LVU7
 224:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  70              		.loc 1 224 36 is_stmt 0 view .LVU8
  71 0004 0223     		movs	r3, #2
  72 0006 0593     		str	r3, [sp, #20]
 225:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
  73              		.loc 1 225 3 is_stmt 1 view .LVU9
 225:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
  74              		.loc 1 225 30 is_stmt 0 view .LVU10
  75 0008 013B     		subs	r3, r3, #1
  76 000a 0893     		str	r3, [sp, #32]
 226:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  77              		.loc 1 226 3 is_stmt 1 view .LVU11
 226:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  78              		.loc 1 226 41 is_stmt 0 view .LVU12
  79 000c 0F33     		adds	r3, r3, #15
  80 000e 0993     		str	r3, [sp, #36]
 227:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  81              		.loc 1 227 3 is_stmt 1 view .LVU13
 227:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  82              		.loc 1 227 34 is_stmt 0 view .LVU14
  83 0010 0023     		movs	r3, #0
  84 0012 0E93     		str	r3, [sp, #56]
 228:Src/main.c    ****   {
  85              		.loc 1 228 3 is_stmt 1 view .LVU15
 228:Src/main.c    ****   {
  86              		.loc 1 228 7 is_stmt 0 view .LVU16
  87 0014 05A8     		add	r0, sp, #20
  88 0016 FFF7FEFF 		bl	HAL_RCC_OscConfig
  89              	.LVL1:
 228:Src/main.c    ****   {
  90              		.loc 1 228 6 discriminator 1 view .LVU17
  91 001a 0028     		cmp	r0, #0
  92 001c 1ED1     		bne	.L6
 235:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
  93              		.loc 1 235 3 is_stmt 1 view .LVU18
 235:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
  94              		.loc 1 235 31 is_stmt 0 view .LVU19
  95 001e 0723     		movs	r3, #7
  96 0020 0193     		str	r3, [sp, #4]
 237:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  97              		.loc 1 237 3 is_stmt 1 view .LVU20
 237:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  98              		.loc 1 237 34 is_stmt 0 view .LVU21
  99 0022 0023     		movs	r3, #0
 100 0024 0293     		str	r3, [sp, #8]
 238:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 101              		.loc 1 238 3 is_stmt 1 view .LVU22
 238:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 102              		.loc 1 238 35 is_stmt 0 view .LVU23
 103 0026 0393     		str	r3, [sp, #12]
 239:Src/main.c    **** 
 104              		.loc 1 239 3 is_stmt 1 view .LVU24
 239:Src/main.c    **** 
ARM GAS  /var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s 			page 8


 105              		.loc 1 239 36 is_stmt 0 view .LVU25
 106 0028 0493     		str	r3, [sp, #16]
 241:Src/main.c    ****   {
 107              		.loc 1 241 3 is_stmt 1 view .LVU26
 241:Src/main.c    ****   {
 108              		.loc 1 241 7 is_stmt 0 view .LVU27
 109 002a 0021     		movs	r1, #0
 110 002c 01A8     		add	r0, sp, #4
 111 002e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 112              	.LVL2:
 241:Src/main.c    ****   {
 113              		.loc 1 241 6 discriminator 1 view .LVU28
 114 0032 0028     		cmp	r0, #0
 115 0034 16D1     		bne	.L7
 248:Src/main.c    **** 
 116              		.loc 1 248 3 is_stmt 1 view .LVU29
 248:Src/main.c    **** 
 117              		.loc 1 248 22 is_stmt 0 view .LVU30
 118 0036 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 119              	.LVL3:
 248:Src/main.c    **** 
 120              		.loc 1 248 3 discriminator 1 view .LVU31
 121 003a FA21     		movs	r1, #250
 122 003c 8900     		lsls	r1, r1, #2
 123 003e FFF7FEFF 		bl	__aeabi_uidiv
 124              	.LVL4:
 125 0042 FFF7FEFF 		bl	HAL_SYSTICK_Config
 126              	.LVL5:
 252:Src/main.c    **** 
 127              		.loc 1 252 3 is_stmt 1 view .LVU32
 128 0046 0420     		movs	r0, #4
 129 0048 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 130              	.LVL6:
 255:Src/main.c    **** }
 131              		.loc 1 255 3 view .LVU33
 132 004c 0120     		movs	r0, #1
 133 004e 0022     		movs	r2, #0
 134 0050 0021     		movs	r1, #0
 135 0052 4042     		rsbs	r0, r0, #0
 136 0054 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 137              	.LVL7:
 256:Src/main.c    **** 
 138              		.loc 1 256 1 is_stmt 0 view .LVU34
 139 0058 13B0     		add	sp, sp, #76
 140              		@ sp needed
 141 005a 00BD     		pop	{pc}
 142              	.L6:
 230:Src/main.c    ****   }
 143              		.loc 1 230 5 is_stmt 1 view .LVU35
 144 005c 0348     		ldr	r0, .L8
 145 005e E621     		movs	r1, #230
 146 0060 FFF7FEFF 		bl	_Error_Handler
 147              	.LVL8:
 148              	.L7:
 243:Src/main.c    ****   }
 149              		.loc 1 243 5 view .LVU36
 150 0064 0148     		ldr	r0, .L8
ARM GAS  /var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s 			page 9


 151 0066 F321     		movs	r1, #243
 152 0068 FFF7FEFF 		bl	_Error_Handler
 153              	.LVL9:
 154              	.L9:
 155              		.align	2
 156              	.L8:
 157 006c 00000000 		.word	.LC0
 158              		.cfi_endproc
 159              	.LFE41:
 161              		.section	.text.main,"ax",%progbits
 162              		.align	1
 163              		.global	main
 164              		.syntax unified
 165              		.code	16
 166              		.thumb_func
 168              	main:
 169              	.LFB40:
  72:Src/main.c    ****   /*
 170              		.loc 1 72 1 view -0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174 0000 10B5     		push	{r4, lr}
 175              	.LCFI2:
 176              		.cfi_def_cfa_offset 8
 177              		.cfi_offset 4, -8
 178              		.cfi_offset 14, -4
 153:Src/main.c    ****   SystemClock_Config();
 179              		.loc 1 153 3 view .LVU38
 180 0002 FFF7FEFF 		bl	HAL_Init
 181              	.LVL10:
 154:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 182              		.loc 1 154 3 view .LVU39
 183 0006 FFF7FEFF 		bl	SystemClock_Config
 184              	.LVL11:
 155:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 185              		.loc 1 155 3 view .LVU40
 155:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 186              		.loc 1 155 6 is_stmt 0 view .LVU41
 187 000a 2E4B     		ldr	r3, .L17
 188 000c 5969     		ldr	r1, [r3, #20]
 155:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 189              		.loc 1 155 15 view .LVU42
 190 000e 8022     		movs	r2, #128
 191 0010 9202     		lsls	r2, r2, #10
 192 0012 0A43     		orrs	r2, r1
 193 0014 5A61     		str	r2, [r3, #20]
 156:Src/main.c    **** 
 194              		.loc 1 156 3 is_stmt 1 view .LVU43
 156:Src/main.c    **** 
 195              		.loc 1 156 6 is_stmt 0 view .LVU44
 196 0016 5969     		ldr	r1, [r3, #20]
 156:Src/main.c    **** 
 197              		.loc 1 156 15 view .LVU45
 198 0018 8022     		movs	r2, #128
 199 001a 1203     		lsls	r2, r2, #12
 200 001c 0A43     		orrs	r2, r1
ARM GAS  /var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s 			page 10


 201 001e 5A61     		str	r2, [r3, #20]
 158:Src/main.c    **** 
 202              		.loc 1 158 3 is_stmt 1 view .LVU46
 203              	.LVL12:
 160:Src/main.c    ****   GPIOC->MODER |= (1 << (6 * 2)); // PC6
 204              		.loc 1 160 3 view .LVU47
 160:Src/main.c    ****   GPIOC->MODER |= (1 << (6 * 2)); // PC6
 205              		.loc 1 160 8 is_stmt 0 view .LVU48
 206 0020 294B     		ldr	r3, .L17+4
 207 0022 1A68     		ldr	r2, [r3]
 160:Src/main.c    ****   GPIOC->MODER |= (1 << (6 * 2)); // PC6
 208              		.loc 1 160 16 view .LVU49
 209 0024 2949     		ldr	r1, .L17+8
 210 0026 0A40     		ands	r2, r1
 211 0028 1A60     		str	r2, [r3]
 161:Src/main.c    ****   GPIOC->MODER |= (1 << (7 * 2)); // PC7
 212              		.loc 1 161 3 is_stmt 1 view .LVU50
 161:Src/main.c    ****   GPIOC->MODER |= (1 << (7 * 2)); // PC7
 213              		.loc 1 161 8 is_stmt 0 view .LVU51
 214 002a 1968     		ldr	r1, [r3]
 161:Src/main.c    ****   GPIOC->MODER |= (1 << (7 * 2)); // PC7
 215              		.loc 1 161 16 view .LVU52
 216 002c 8022     		movs	r2, #128
 217 002e 5201     		lsls	r2, r2, #5
 218 0030 0A43     		orrs	r2, r1
 219 0032 1A60     		str	r2, [r3]
 162:Src/main.c    ****   GPIOC->OTYPER &= ~((1 << 6) | (1 << 7)); // clear and both push-pull type
 220              		.loc 1 162 3 is_stmt 1 view .LVU53
 162:Src/main.c    ****   GPIOC->OTYPER &= ~((1 << 6) | (1 << 7)); // clear and both push-pull type
 221              		.loc 1 162 8 is_stmt 0 view .LVU54
 222 0034 1968     		ldr	r1, [r3]
 162:Src/main.c    ****   GPIOC->OTYPER &= ~((1 << 6) | (1 << 7)); // clear and both push-pull type
 223              		.loc 1 162 16 view .LVU55
 224 0036 8022     		movs	r2, #128
 225 0038 D201     		lsls	r2, r2, #7
 226 003a 0A43     		orrs	r2, r1
 227 003c 1A60     		str	r2, [r3]
 163:Src/main.c    ****   GPIOC->OSPEEDR &= ~((3 << 6) | (3 << 7)); // clear and both low speed type
 228              		.loc 1 163 3 is_stmt 1 view .LVU56
 163:Src/main.c    ****   GPIOC->OSPEEDR &= ~((3 << 6) | (3 << 7)); // clear and both low speed type
 229              		.loc 1 163 8 is_stmt 0 view .LVU57
 230 003e 5A68     		ldr	r2, [r3, #4]
 163:Src/main.c    ****   GPIOC->OSPEEDR &= ~((3 << 6) | (3 << 7)); // clear and both low speed type
 231              		.loc 1 163 17 view .LVU58
 232 0040 C021     		movs	r1, #192
 233 0042 8A43     		bics	r2, r1
 234 0044 5A60     		str	r2, [r3, #4]
 164:Src/main.c    ****   GPIOC->PUPDR &= ~((3 << 6) | (3 << 7)); // clear and both no pull-up down
 235              		.loc 1 164 3 is_stmt 1 view .LVU59
 164:Src/main.c    ****   GPIOC->PUPDR &= ~((3 << 6) | (3 << 7)); // clear and both no pull-up down
 236              		.loc 1 164 8 is_stmt 0 view .LVU60
 237 0046 9A68     		ldr	r2, [r3, #8]
 164:Src/main.c    ****   GPIOC->PUPDR &= ~((3 << 6) | (3 << 7)); // clear and both no pull-up down
 238              		.loc 1 164 18 view .LVU61
 239 0048 2149     		ldr	r1, .L17+12
 240 004a 0A40     		ands	r2, r1
 241 004c 9A60     		str	r2, [r3, #8]
ARM GAS  /var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s 			page 11


 165:Src/main.c    **** 
 242              		.loc 1 165 3 is_stmt 1 view .LVU62
 165:Src/main.c    **** 
 243              		.loc 1 165 8 is_stmt 0 view .LVU63
 244 004e DA68     		ldr	r2, [r3, #12]
 165:Src/main.c    **** 
 245              		.loc 1 165 16 view .LVU64
 246 0050 0A40     		ands	r2, r1
 247 0052 DA60     		str	r2, [r3, #12]
 168:Src/main.c    ****   // // PC6 to low
 248              		.loc 1 168 3 is_stmt 1 view .LVU65
 168:Src/main.c    ****   // // PC6 to low
 249              		.loc 1 168 15 is_stmt 0 view .LVU66
 250 0054 8022     		movs	r2, #128
 251 0056 9A61     		str	r2, [r3, #24]
 170:Src/main.c    **** 
 252              		.loc 1 170 3 is_stmt 1 view .LVU67
 170:Src/main.c    **** 
 253              		.loc 1 170 15 is_stmt 0 view .LVU68
 254 0058 8022     		movs	r2, #128
 255 005a D203     		lsls	r2, r2, #15
 256 005c 9A61     		str	r2, [r3, #24]
 173:Src/main.c    **** 
 257              		.loc 1 173 3 is_stmt 1 view .LVU69
 173:Src/main.c    **** 
 258              		.loc 1 173 8 is_stmt 0 view .LVU70
 259 005e 9023     		movs	r3, #144
 260 0060 DB05     		lsls	r3, r3, #23
 261 0062 1A68     		ldr	r2, [r3]
 173:Src/main.c    **** 
 262              		.loc 1 173 16 view .LVU71
 263 0064 C531     		adds	r1, r1, #197
 264 0066 FF31     		adds	r1, r1, #255
 265 0068 8A43     		bics	r2, r1
 266 006a 1A60     		str	r2, [r3]
 175:Src/main.c    **** 
 267              		.loc 1 175 3 is_stmt 1 view .LVU72
 175:Src/main.c    **** 
 268              		.loc 1 175 8 is_stmt 0 view .LVU73
 269 006c 9A68     		ldr	r2, [r3, #8]
 175:Src/main.c    **** 
 270              		.loc 1 175 18 view .LVU74
 271 006e 8A43     		bics	r2, r1
 272 0070 9A60     		str	r2, [r3, #8]
 177:Src/main.c    ****   GPIOA->PUPDR |= (2 << (0 * 2));
 273              		.loc 1 177 3 is_stmt 1 view .LVU75
 177:Src/main.c    ****   GPIOA->PUPDR |= (2 << (0 * 2));
 274              		.loc 1 177 8 is_stmt 0 view .LVU76
 275 0072 DA68     		ldr	r2, [r3, #12]
 177:Src/main.c    ****   GPIOA->PUPDR |= (2 << (0 * 2));
 276              		.loc 1 177 16 view .LVU77
 277 0074 8A43     		bics	r2, r1
 278 0076 DA60     		str	r2, [r3, #12]
 178:Src/main.c    **** 
 279              		.loc 1 178 3 is_stmt 1 view .LVU78
 178:Src/main.c    **** 
 280              		.loc 1 178 8 is_stmt 0 view .LVU79
ARM GAS  /var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s 			page 12


 281 0078 DA68     		ldr	r2, [r3, #12]
 178:Src/main.c    **** 
 282              		.loc 1 178 16 view .LVU80
 283 007a 0139     		subs	r1, r1, #1
 284 007c 0A43     		orrs	r2, r1
 285 007e DA60     		str	r2, [r3, #12]
 180:Src/main.c    **** 
 286              		.loc 1 180 3 is_stmt 1 view .LVU81
 287              	.LVL13:
 180:Src/main.c    **** 
 288              		.loc 1 180 11 is_stmt 0 view .LVU82
 289 0080 0021     		movs	r1, #0
 158:Src/main.c    **** 
 290              		.loc 1 158 12 view .LVU83
 291 0082 0023     		movs	r3, #0
 292 0084 02E0     		b	.L11
 293              	.LVL14:
 294              	.L12:
 187:Src/main.c    ****     // This code triggers repeatedly when button is steady high!
 295              		.loc 1 187 5 is_stmt 1 view .LVU84
 189:Src/main.c    ****     if (debouncer == 0x00000000) {
 296              		.loc 1 189 5 view .LVU85
 190:Src/main.c    ****     // This code triggers repeatedly when button is steady low!
 297              		.loc 1 190 5 view .LVU86
 192:Src/main.c    ****     if (debouncer == 0x7FFFFFFF) {
 298              		.loc 1 192 5 view .LVU87
 193:Src/main.c    ****     // This code triggers only once when transitioning to steady high!
 299              		.loc 1 193 5 view .LVU88
 193:Src/main.c    ****     // This code triggers only once when transitioning to steady high!
 300              		.loc 1 193 8 is_stmt 0 view .LVU89
 301 0086 134A     		ldr	r2, .L17+16
 302 0088 9342     		cmp	r3, r2
 303 008a 08D0     		beq	.L16
 304              	.LVL15:
 305              	.L11:
 182:Src/main.c    ****     debouncer = (debouncer << 1); // Always shift every loop iteration
 306              		.loc 1 182 3 is_stmt 1 view .LVU90
 183:Src/main.c    ****     if (GPIOA->IDR & (1 << 0)) { // If input signal is set/high
 307              		.loc 1 183 5 view .LVU91
 183:Src/main.c    ****     if (GPIOA->IDR & (1 << 0)) { // If input signal is set/high
 308              		.loc 1 183 15 is_stmt 0 view .LVU92
 309 008c 5B00     		lsls	r3, r3, #1
 310              	.LVL16:
 184:Src/main.c    ****       debouncer |= 0x01; // Set lowest bit of bit-vector
 311              		.loc 1 184 5 is_stmt 1 view .LVU93
 184:Src/main.c    ****       debouncer |= 0x01; // Set lowest bit of bit-vector
 312              		.loc 1 184 14 is_stmt 0 view .LVU94
 313 008e 9022     		movs	r2, #144
 314 0090 D205     		lsls	r2, r2, #23
 315 0092 1269     		ldr	r2, [r2, #16]
 184:Src/main.c    ****       debouncer |= 0x01; // Set lowest bit of bit-vector
 316              		.loc 1 184 8 view .LVU95
 317 0094 D207     		lsls	r2, r2, #31
 318 0096 F6D5     		bpl	.L12
 185:Src/main.c    ****     }
 319              		.loc 1 185 7 is_stmt 1 view .LVU96
 185:Src/main.c    ****     }
ARM GAS  /var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s 			page 13


 320              		.loc 1 185 17 is_stmt 0 view .LVU97
 321 0098 0122     		movs	r2, #1
 322 009a 1343     		orrs	r3, r2
 323              	.LVL17:
 185:Src/main.c    ****     }
 324              		.loc 1 185 17 view .LVU98
 325 009c F3E7     		b	.L12
 326              	.L16:
 195:Src/main.c    ****               // LED ON
 327              		.loc 1 195 7 is_stmt 1 view .LVU99
 195:Src/main.c    ****               // LED ON
 328              		.loc 1 195 10 is_stmt 0 view .LVU100
 329 009e 0029     		cmp	r1, #0
 330 00a0 07D1     		bne	.L14
 197:Src/main.c    ****               GPIOC->BSRR = (1 << (7 + 16)); // LED OFF PC7
 331              		.loc 1 197 15 is_stmt 1 view .LVU101
 197:Src/main.c    ****               GPIOC->BSRR = (1 << (7 + 16)); // LED OFF PC7
 332              		.loc 1 197 27 is_stmt 0 view .LVU102
 333 00a2 094A     		ldr	r2, .L17+4
 334 00a4 4031     		adds	r1, r1, #64
 335              	.LVL18:
 197:Src/main.c    ****               GPIOC->BSRR = (1 << (7 + 16)); // LED OFF PC7
 336              		.loc 1 197 27 view .LVU103
 337 00a6 9161     		str	r1, [r2, #24]
 198:Src/main.c    ****               ledState = 1; // LED state
 338              		.loc 1 198 15 is_stmt 1 view .LVU104
 198:Src/main.c    ****               ledState = 1; // LED state
 339              		.loc 1 198 27 is_stmt 0 view .LVU105
 340 00a8 8021     		movs	r1, #128
 341 00aa 0904     		lsls	r1, r1, #16
 342 00ac 9161     		str	r1, [r2, #24]
 199:Src/main.c    ****           } else {
 343              		.loc 1 199 15 is_stmt 1 view .LVU106
 344              	.LVL19:
 199:Src/main.c    ****           } else {
 345              		.loc 1 199 24 is_stmt 0 view .LVU107
 346 00ae 0121     		movs	r1, #1
 347 00b0 ECE7     		b	.L11
 348              	.LVL20:
 349              	.L14:
 202:Src/main.c    ****               GPIOC->BSRR = (1 << (6 + 16)); // LED OFF PC6
 350              		.loc 1 202 15 is_stmt 1 view .LVU108
 202:Src/main.c    ****               GPIOC->BSRR = (1 << (6 + 16)); // LED OFF PC6
 351              		.loc 1 202 27 is_stmt 0 view .LVU109
 352 00b2 054A     		ldr	r2, .L17+4
 353 00b4 8021     		movs	r1, #128
 354              	.LVL21:
 202:Src/main.c    ****               GPIOC->BSRR = (1 << (6 + 16)); // LED OFF PC6
 355              		.loc 1 202 27 view .LVU110
 356 00b6 9161     		str	r1, [r2, #24]
 203:Src/main.c    ****               ledState = 0; // LED state
 357              		.loc 1 203 15 is_stmt 1 view .LVU111
 203:Src/main.c    ****               ledState = 0; // LED state
 358              		.loc 1 203 27 is_stmt 0 view .LVU112
 359 00b8 8021     		movs	r1, #128
 360 00ba C903     		lsls	r1, r1, #15
 361 00bc 9161     		str	r1, [r2, #24]
ARM GAS  /var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s 			page 14


 204:Src/main.c    ****           
 362              		.loc 1 204 15 is_stmt 1 view .LVU113
 363              	.LVL22:
 204:Src/main.c    ****           
 364              		.loc 1 204 24 is_stmt 0 view .LVU114
 365 00be 0021     		movs	r1, #0
 366 00c0 E4E7     		b	.L11
 367              	.L18:
 368 00c2 C046     		.align	2
 369              	.L17:
 370 00c4 00100240 		.word	1073876992
 371 00c8 00080048 		.word	1207961600
 372 00cc FF0FFFFF 		.word	-61441
 373 00d0 3FFEFFFF 		.word	-449
 374 00d4 FFFFFF7F 		.word	2147483647
 375              		.cfi_endproc
 376              	.LFE40:
 378              		.text
 379              	.Letext0:
 380              		.file 2 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 381              		.file 3 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 382              		.file 4 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 383              		.file 5 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 384              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 385              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 386              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  /var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s 			page 15


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s:19     .text._Error_Handler:00000000 $t
/var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s:25     .text._Error_Handler:00000000 _Error_Handler
/var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s:43     .rodata.SystemClock_Config.str1.4:00000000 $d
/var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s:48     .text.SystemClock_Config:00000000 $t
/var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s:54     .text.SystemClock_Config:00000000 SystemClock_Config
/var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s:157    .text.SystemClock_Config:0000006c $d
/var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s:162    .text.main:00000000 $t
/var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s:168    .text.main:00000000 main
/var/folders/zd/d6dt4dr905z_mvnxcmn6y_dc0000gn/T//cc9WoWw2.s:370    .text.main:000000c4 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
